# pars = rnorm(4, c(0.25,0.25,4,1), 3)
tmp0 <- tryCatch.W.E (
fityx(y,x,pars[1:length.b],
hr,ystart,pi.x,pars[(length.b+1):length(pars)],w,control=list(),hessian=TRUE,corrFlag=0.7,debug=FALSE)
)
fit = NA
if(! "error" %in% class(tmp0$value)) {
fit <- tmp0$value
fit$vcov <-  matrix(Matrix::nearPD(fit$vcov)$mat,4,4)
}
FIT[[m]] = fit
if(is.na(fit[1])) dev=c(dev, 1e12) else dev = c(dev, fit$val)
}
fitVU = FIT[[which.min(dev)]]
tabVU = matrix(NA,2,3)
if(is.na(fitVU[1])) tabVU = matrix(NA,2,3) else {
tmp1 <- tryCatch.W.E (boot(fitVU))
if(! "error" %in% class(tmp1$value))  tabVU=tmp1$value
}
### Population density
tabVU[2,]/sum(transect.lengths)/(fitVU$w/1000) /2 ## divided by two to get the average over 2 years
fitVU
y = c(montiVU2012$y , montiVU2013$y)
x = c(montiVU2012$x , montiVU2013$x)
hr = h.IP # h.yTRE non è compatibile con pi.sigmoI
pi.x = pi.sigmo
ystart = ceiling(max(y))
w = ceiling(max(x))
length.b = 2
debug=FALSE
FIT=list(); dev=NULL
for (m in 1:10) {
pars = rnorm(4, c(0.25,0.25,-4,-1), 3)
# pars = rnorm(4, c(0.25,0.25,4,1), 3)
tmp0 <- tryCatch.W.E (
fityx(y,x,pars[1:length.b],
hr,ystart,pi.x,pars[(length.b+1):length(pars)],w,control=list(),hessian=TRUE,corrFlag=0.7,debug=FALSE)
)
fit = NA
if(! "error" %in% class(tmp0$value)) {
fit <- tmp0$value
fit$vcov <-  matrix(Matrix::nearPD(fit$vcov)$mat,4,4)
}
FIT[[m]] = fit
if(is.na(fit[1])) dev=c(dev, 1e12) else dev = c(dev, fit$val)
}
fitVU = FIT[[which.min(dev)]]
tabVU = matrix(NA,2,3)
if(is.na(fitVU[1])) tabVU = matrix(NA,2,3) else {
tmp1 <- tryCatch.W.E (boot(fitVU))
if(! "error" %in% class(tmp1$value))  tabVU=tmp1$value
}
### Population density
tabVU[2,]/sum(transect.lengths)/(fitVU$w/1000) /2 ## divided by two to get the average over 2 years
fitVU
# vedere https://github.com/david-borchers/LT2D/blob/master/inst/FitsForPaper.r
# linea nera sigmoide = distribuzione reale animali
# linea grigia = detection osservata
# linea tratteggiata = detection corretta tenendo conto della risposta comportamentale
plotfit.x(x[x<=w],fitVU,nclass=20);rug(x[x<=w])
y = c(montiVU2012$y , montiVU2013$y)
x = c(montiVU2012$x , montiVU2013$x)
hr = h.IP # h.yTRE non è compatibile con pi.sigmoI
# funzionano h.RE, h.IP
pi.x = pi.sigmoI
ystart = ceiling(max(y))
w = ceiling(max(x))
length.b = 2
debug=FALSE
FIT=list(); dev=NULL
for (m in 1:10) {
pars = rnorm(4, c(0.25,0.25,-4,-1), 3)
# pars = rnorm(4, c(0.25,0.25,4,1), 3)
tmp0 <- tryCatch.W.E (
fityx(y,x,pars[1:length.b],
hr,ystart,pi.x,pars[(length.b+1):length(pars)],w,control=list(),hessian=TRUE,corrFlag=0.7,debug=FALSE)
)
fit = NA
if(! "error" %in% class(tmp0$value)) {
fit <- tmp0$value
fit$vcov <-  matrix(Matrix::nearPD(fit$vcov)$mat,4,4)
}
FIT[[m]] = fit
if(is.na(fit[1])) dev=c(dev, 1e12) else dev = c(dev, fit$val)
}
fitVU = FIT[[which.min(dev)]]
tabVU = matrix(NA,2,3)
if(is.na(fitVU[1])) tabVU = matrix(NA,2,3) else {
tmp1 <- tryCatch.W.E (boot(fitVU))
if(! "error" %in% class(tmp1$value))  tabVU=tmp1$value
}
### Population density
tabVU[2,]/sum(transect.lengths)/(fitVU$w/1000) /2 ## divided by two to get the average over 2 years
# vedere https://github.com/david-borchers/LT2D/blob/master/inst/FitsForPaper.r
# linea nera sigmoide = distribuzione reale animali
# linea grigia = detection osservata
# linea tratteggiata = detection corretta tenendo conto della risposta comportamentale
plotfit.x(x[x<=w],fitVU,nclass=20);rug(x[x<=w])
#### Fit 2D distance sampling model using multiple initial value to avoid local minima in the deviance
y = c(montiVU2012$y , montiVU2013$y)
x = c(montiVU2012$x , montiVU2013$x)
hr = h.IP # h.yTRE non è compatibile con pi.sigmoI
# funzionano h.RE, h.IP
pi.x = pi.sigmoI
ystart = ceiling(max(y))
w = ceiling(max(x))
length.b = 2
debug=FALSE
FIT=list(); dev=NULL
for (m in 1:10) {
pars = rnorm(4, c(0.25,0.25,-4,-1), 3)
# pars = rnorm(4, c(0.25,0.25,4,1), 3)
tmp0 <- tryCatch.W.E (
fityx(y,x,pars[1:length.b],
hr,ystart,pi.x,pars[(length.b+1):length(pars)],w,control=list(),hessian=TRUE,corrFlag=0.7,debug=FALSE)
)
fit = NA
if(! "error" %in% class(tmp0$value)) {
fit <- tmp0$value
fit$vcov <-  matrix(Matrix::nearPD(fit$vcov)$mat,4,4)
}
FIT[[m]] = fit
if(is.na(fit[1])) dev=c(dev, 1e12) else dev = c(dev, fit$val)
}
#### Fit 2D distance sampling model using multiple initial value to avoid local minima in the deviance
y = c(montiVU2012$y , montiVU2013$y)
x = c(montiVU2012$x , montiVU2013$x)
hr = h.SS # h.yTRE non è compatibile con pi.sigmoI
# funzionano h.RE, h.IP
pi.x = pi.sigmo
ystart = ceiling(max(y))
w = ceiling(max(x))
length.b = 2
debug=FALSE
FIT=list(); dev=NULL
for (m in 1:10) {
pars = rnorm(4, c(0.25,0.25,-4,-1), 3)
# pars = rnorm(4, c(0.25,0.25,4,1), 3)
tmp0 <- tryCatch.W.E (
fityx(y,x,pars[1:length.b],
hr,ystart,pi.x,pars[(length.b+1):length(pars)],w,control=list(),hessian=TRUE,corrFlag=0.7,debug=FALSE)
)
fit = NA
if(! "error" %in% class(tmp0$value)) {
fit <- tmp0$value
fit$vcov <-  matrix(Matrix::nearPD(fit$vcov)$mat,4,4)
}
FIT[[m]] = fit
if(is.na(fit[1])) dev=c(dev, 1e12) else dev = c(dev, fit$val)
}
fitVU = FIT[[which.min(dev)]]
tabVU = matrix(NA,2,3)
if(is.na(fitVU[1])) tabVU = matrix(NA,2,3) else {
tmp1 <- tryCatch.W.E (boot(fitVU))
if(! "error" %in% class(tmp1$value))  tabVU=tmp1$value
}
### Population density
tabVU[2,]/sum(transect.lengths)/(fitVU$w/1000) /2 ## divided by two to get the average over 2 years
# vedere https://github.com/david-borchers/LT2D/blob/master/inst/FitsForPaper.r
# linea nera sigmoide = distribuzione reale animali
# linea grigia = detection osservata
# linea tratteggiata = detection corretta tenendo conto della risposta comportamentale
plotfit.x(x[x<=w],fitVU,nclass=20);rug(x[x<=w])
#### Fit 2D distance sampling model using multiple initial value to avoid local minima in the deviance
y = c(montiVU2012$y , montiVU2013$y)
x = c(montiVU2012$x , montiVU2013$x)
hr = h.okamura # h.yTRE non è compatibile con pi.sigmoI
# funzionano h.RE, h.IP, h.SS, h.okamura, h.const
pi.x = pi.sigmo
ystart = ceiling(max(y))
w = ceiling(max(x))
length.b = 2
debug=FALSE
FIT=list(); dev=NULL
for (m in 1:10) {
pars = rnorm(4, c(0.25,0.25,-4,-1), 3)
# pars = rnorm(4, c(0.25,0.25,4,1), 3)
tmp0 <- tryCatch.W.E (
fityx(y,x,pars[1:length.b],
hr,ystart,pi.x,pars[(length.b+1):length(pars)],w,control=list(),hessian=TRUE,corrFlag=0.7,debug=FALSE)
)
fit = NA
if(! "error" %in% class(tmp0$value)) {
fit <- tmp0$value
fit$vcov <-  matrix(Matrix::nearPD(fit$vcov)$mat,4,4)
}
FIT[[m]] = fit
if(is.na(fit[1])) dev=c(dev, 1e12) else dev = c(dev, fit$val)
}
fitVU = FIT[[which.min(dev)]]
tabVU = matrix(NA,2,3)
if(is.na(fitVU[1])) tabVU = matrix(NA,2,3) else {
tmp1 <- tryCatch.W.E (boot(fitVU))
if(! "error" %in% class(tmp1$value))  tabVU=tmp1$value
}
### Population density
tabVU[2,]/sum(transect.lengths)/(fitVU$w/1000) /2 ## divided by two to get the average over 2 years
# vedere https://github.com/david-borchers/LT2D/blob/master/inst/FitsForPaper.r
# linea nera sigmoide = distribuzione reale animali
# linea grigia = detection osservata
# linea tratteggiata = detection corretta tenendo conto della risposta comportamentale
plotfit.x(x[x<=w],fitVU,nclass=20);rug(x[x<=w])
GoFx(fitVU,plot=TRUE)$pvals
#### Fit 2D distance sampling model using multiple initial value to avoid local minima in the deviance
y = c(montiVU2012$y , montiVU2013$y)
x = c(montiVU2012$x , montiVU2013$x)
hr = h.const # h.yTRE non è compatibile con pi.sigmoI
# funzionano h.RE, h.IP, h.SS, h.okamura, h.const
pi.x = pi.sigmo
ystart = ceiling(max(y))
w = ceiling(max(x))
length.b = 2
debug=FALSE
FIT=list(); dev=NULL
for (m in 1:10) {
pars = rnorm(4, c(0.25,0.25,-4,-1), 3)
# pars = rnorm(4, c(0.25,0.25,4,1), 3)
tmp0 <- tryCatch.W.E (
fityx(y,x,pars[1:length.b],
hr,ystart,pi.x,pars[(length.b+1):length(pars)],w,control=list(),hessian=TRUE,corrFlag=0.7,debug=FALSE)
)
fit = NA
if(! "error" %in% class(tmp0$value)) {
fit <- tmp0$value
fit$vcov <-  matrix(Matrix::nearPD(fit$vcov)$mat,4,4)
}
FIT[[m]] = fit
if(is.na(fit[1])) dev=c(dev, 1e12) else dev = c(dev, fit$val)
}
fitVU = FIT[[which.min(dev)]]
tabVU = matrix(NA,2,3)
if(is.na(fitVU[1])) tabVU = matrix(NA,2,3) else {
tmp1 <- tryCatch.W.E (boot(fitVU))
if(! "error" %in% class(tmp1$value))  tabVU=tmp1$value
}
### Population density
tabVU[2,]/sum(transect.lengths)/(fitVU$w/1000) /2 ## divided by two to get the average over 2 years
#### Fit 2D distance sampling model using multiple initial value to avoid local minima in the deviance
y = c(montiVU2012$y , montiVU2013$y)
x = c(montiVU2012$x , montiVU2013$x)
hr = h.const # h.yTRE non è compatibile con pi.sigmoI
# funzionano h.RE, h.IP, h.SS, h.okamura
pi.x = pi.sigmo
ystart = ceiling(max(y))
w = ceiling(max(x))
length.b = 1
debug=FALSE
FIT=list(); dev=NULL
for (m in 1:10) {
pars = rnorm(4, c(0.25,0.25,-4,-1), 3)
# pars = rnorm(4, c(0.25,0.25,4,1), 3)
tmp0 <- tryCatch.W.E (
fityx(y,x,pars[1:length.b],
hr,ystart,pi.x,pars[(length.b+1):length(pars)],w,control=list(),hessian=TRUE,corrFlag=0.7,debug=FALSE)
)
fit = NA
if(! "error" %in% class(tmp0$value)) {
fit <- tmp0$value
fit$vcov <-  matrix(Matrix::nearPD(fit$vcov)$mat,4,4)
}
FIT[[m]] = fit
if(is.na(fit[1])) dev=c(dev, 1e12) else dev = c(dev, fit$val)
}
fitVU = FIT[[which.min(dev)]]
tabVU = matrix(NA,2,3)
if(is.na(fitVU[1])) tabVU = matrix(NA,2,3) else {
tmp1 <- tryCatch.W.E (boot(fitVU))
if(! "error" %in% class(tmp1$value))  tabVU=tmp1$value
}
### Population density
tabVU[2,]/sum(transect.lengths)/(fitVU$w/1000) /2 ## divided by two to get the average over 2 years
fitVU
pars[(length.b+1):length(pars)]
length.b
#### Fit 2D distance sampling model using multiple initial value to avoid local minima in the deviance
y = c(montiVU2012$y , montiVU2013$y)
x = c(montiVU2012$x , montiVU2013$x)
hr = h.RE # h.yTRE non è compatibile con pi.sigmoI
# funzionano h.RE, h.IP, h.SS, h.okamura
pi.x = pi.HN
ystart = ceiling(max(y))
w = ceiling(max(x))
length.b = 2
debug=FALSE
FIT=list(); dev=NULL
for (m in 1:10) {
pars = rnorm(4, c(0.25,0.25,-4,-1), 3)
# pars = rnorm(4, c(0.25,0.25,4,1), 3)
tmp0 <- tryCatch.W.E (
fityx(y,x,pars[1:length.b],
hr,ystart,pi.x,pars[(length.b+1):length(pars)],w,control=list(),hessian=TRUE,corrFlag=0.7,debug=FALSE)
)
fit = NA
if(! "error" %in% class(tmp0$value)) {
fit <- tmp0$value
fit$vcov <-  matrix(Matrix::nearPD(fit$vcov)$mat,4,4)
}
FIT[[m]] = fit
if(is.na(fit[1])) dev=c(dev, 1e12) else dev = c(dev, fit$val)
}
fitVU = FIT[[which.min(dev)]]
tabVU = matrix(NA,2,3)
if(is.na(fitVU[1])) tabVU = matrix(NA,2,3) else {
tmp1 <- tryCatch.W.E (boot(fitVU))
if(! "error" %in% class(tmp1$value))  tabVU=tmp1$value
}
### Population density
tabVU[2,]/sum(transect.lengths)/(fitVU$w/1000) /2 ## divided by two to get the average over 2 years
# funzionano h.RE, h.IP, h.SS, h.okamura
pi.x = pi.CHN
ystart = ceiling(max(y))
w = ceiling(max(x))
length.b = 2
debug=FALSE
FIT=list(); dev=NULL
for (m in 1:10) {
pars = rnorm(4, c(0.25,0.25,-4,-1), 3)
# pars = rnorm(4, c(0.25,0.25,4,1), 3)
tmp0 <- tryCatch.W.E (
fityx(y,x,pars[1:length.b],
hr,ystart,pi.x,pars[(length.b+1):length(pars)],w,control=list(),hessian=TRUE,corrFlag=0.7,debug=FALSE)
)
fit = NA
if(! "error" %in% class(tmp0$value)) {
fit <- tmp0$value
fit$vcov <-  matrix(Matrix::nearPD(fit$vcov)$mat,4,4)
}
FIT[[m]] = fit
if(is.na(fit[1])) dev=c(dev, 1e12) else dev = c(dev, fit$val)
}
fitVU = FIT[[which.min(dev)]]
tabVU = matrix(NA,2,3)
if(is.na(fitVU[1])) tabVU = matrix(NA,2,3) else {
tmp1 <- tryCatch.W.E (boot(fitVU))
if(! "error" %in% class(tmp1$value))  tabVU=tmp1$value
}
### Population density
tabVU[2,]/sum(transect.lengths)/(fitVU$w/1000) /2 ## divided by two to get the average over 2 years
# vedere https://github.com/david-borchers/LT2D/blob/master/inst/FitsForPaper.r
# linea nera sigmoide = distribuzione reale animali
# linea grigia = detection osservata
# linea tratteggiata = detection corretta tenendo conto della risposta comportamentale
plotfit.x(x[x<=w],fitVU,nclass=20);rug(x[x<=w])
y = c(montiVU2012$y , montiVU2013$y)
x = c(montiVU2012$x , montiVU2013$x)
hr = h.RE # h.yTRE non è compatibile con pi.sigmoI
# funzionano h.RE, h.IP, h.SS, h.okamura
pi.x = pi.TN
# funzionano con h.RE pi.sigmo, pi.CHN
ystart = ceiling(max(y))
w = ceiling(max(x))
length.b = 2
debug=FALSE
FIT=list(); dev=NULL
for (m in 1:10) {
pars = rnorm(4, c(0.25,0.25,-4,-1), 3)
# pars = rnorm(4, c(0.25,0.25,4,1), 3)
tmp0 <- tryCatch.W.E (
fityx(y,x,pars[1:length.b],
hr,ystart,pi.x,pars[(length.b+1):length(pars)],w,control=list(),hessian=TRUE,corrFlag=0.7,debug=FALSE)
)
fit = NA
if(! "error" %in% class(tmp0$value)) {
fit <- tmp0$value
fit$vcov <-  matrix(Matrix::nearPD(fit$vcov)$mat,4,4)
}
FIT[[m]] = fit
if(is.na(fit[1])) dev=c(dev, 1e12) else dev = c(dev, fit$val)
}
fitVU = FIT[[which.min(dev)]]
tabVU = matrix(NA,2,3)
if(is.na(fitVU[1])) tabVU = matrix(NA,2,3) else {
tmp1 <- tryCatch.W.E (boot(fitVU))
if(! "error" %in% class(tmp1$value))  tabVU=tmp1$value
}
### Population density
tabVU[2,]/sum(transect.lengths)/(fitVU$w/1000) /2 ## divided by two to get the average over 2 years
# vedere https://github.com/david-borchers/LT2D/blob/master/inst/FitsForPaper.r
# linea nera sigmoide = distribuzione reale animali
# linea grigia = detection osservata
# linea tratteggiata = detection corretta tenendo conto della risposta comportamentale
plotfit.x(x[x<=w],fitVU,nclass=20);rug(x[x<=w])
source("com_pifunctions.R")
y = c(montiVU2012$y , montiVU2013$y)
x = c(montiVU2012$x , montiVU2013$x)
hr = h.RE # h.yTRE non è compatibile con pi.sigmoI
# funzionano h.RE, h.IP, h.SS, h.okamura
pi.x = pi.sigmoI
# funzionano con h.RE pi.sigmo, pi.CHN, pi.TN
ystart = ceiling(max(y))
w = ceiling(max(x))
length.b = 2
debug=FALSE
FIT=list(); dev=NULL
for (m in 1:10) {
pars = rnorm(4, c(0.25,0.25,-4,-1), 3)
# pars = rnorm(4, c(0.25,0.25,4,1), 3)
tmp0 <- tryCatch.W.E (
fityx(y,x,pars[1:length.b],
hr,ystart,pi.x,pars[(length.b+1):length(pars)],w,control=list(),hessian=TRUE,corrFlag=0.7,debug=FALSE)
)
fit = NA
if(! "error" %in% class(tmp0$value)) {
fit <- tmp0$value
fit$vcov <-  matrix(Matrix::nearPD(fit$vcov)$mat,4,4)
}
FIT[[m]] = fit
if(is.na(fit[1])) dev=c(dev, 1e12) else dev = c(dev, fit$val)
}
fitVU = FIT[[which.min(dev)]]
tabVU = matrix(NA,2,3)
if(is.na(fitVU[1])) tabVU = matrix(NA,2,3) else {
tmp1 <- tryCatch.W.E (boot(fitVU))
if(! "error" %in% class(tmp1$value))  tabVU=tmp1$value
}
### Population density
tabVU[2,]/sum(transect.lengths)/(fitVU$w/1000) /2 ## divided by two to get the average over 2 years
#### Fit 2D distance sampling model using multiple initial value to avoid local minima in the deviance
y = c(montiVU2012$y , montiVU2013$y)
x = c(montiVU2012$x , montiVU2013$x)
hr = h.RE # h.yTRE non è compatibile con pi.sigmoI
# funzionano h.RE, h.IP, h.SS, h.okamura
pi.x = pi.const
# funzionano con h.RE: pi.sigmo, pi.CHN, pi.TN
ystart = ceiling(max(y))
w = ceiling(max(x))
length.b = 2
debug=FALSE
FIT=list(); dev=NULL
for (m in 1:10) {
pars = rnorm(4, c(0.25,0.25,-4,-1), 3)
# pars = rnorm(4, c(0.25,0.25,4,1), 3)
tmp0 <- tryCatch.W.E (
fityx(y,x,pars[1:length.b],
hr,ystart,pi.x,pars[(length.b+1):length(pars)],w,control=list(),hessian=TRUE,corrFlag=0.7,debug=FALSE)
)
fit = NA
if(! "error" %in% class(tmp0$value)) {
fit <- tmp0$value
fit$vcov <-  matrix(Matrix::nearPD(fit$vcov)$mat,4,4)
}
FIT[[m]] = fit
if(is.na(fit[1])) dev=c(dev, 1e12) else dev = c(dev, fit$val)
}
fitVU = FIT[[which.min(dev)]]
tabVU = matrix(NA,2,3)
if(is.na(fitVU[1])) tabVU = matrix(NA,2,3) else {
tmp1 <- tryCatch.W.E (boot(fitVU))
if(! "error" %in% class(tmp1$value))  tabVU=tmp1$value
}
### Population density
tabVU[2,]/sum(transect.lengths)/(fitVU$w/1000) /2 ## divided by two to get the average over 2 years
GoFx(fitVU,plot=TRUE)$pvals
#### Fit 2D distance sampling model using multiple initial value to avoid local minima in the deviance
y = c(montiVU2012$y , montiVU2013$y)
x = c(montiVU2012$x , montiVU2013$x)
hr = h.RE # h.yTRE non è compatibile con pi.sigmoI
# funzionano h.RE, h.IP, h.SS, h.okamura
pi.x = pi.sigmo
# funzionano con h.RE: pi.sigmo, pi.CHN, pi.TN
ystart = ceiling(max(y))
w = ceiling(max(x))
length.b = 2
debug=FALSE
FIT=list(); dev=NULL
for (m in 1:10) {
pars = rnorm(4, c(0.25,0.25,-4,-1), 3)
# pars = rnorm(4, c(0.25,0.25,4,1), 3)
tmp0 <- tryCatch.W.E (
fityx(y,x,pars[1:length.b],
hr,ystart,pi.x,pars[(length.b+1):length(pars)],w,control=list(),hessian=TRUE,corrFlag=0.7,debug=FALSE)
)
fit = NA
if(! "error" %in% class(tmp0$value)) {
fit <- tmp0$value
fit$vcov <-  matrix(Matrix::nearPD(fit$vcov)$mat,4,4)
}
FIT[[m]] = fit
if(is.na(fit[1])) dev=c(dev, 1e12) else dev = c(dev, fit$val)
}
fitVU = FIT[[which.min(dev)]]
tabVU = matrix(NA,2,3)
if(is.na(fitVU[1])) tabVU = matrix(NA,2,3) else {
tmp1 <- tryCatch.W.E (boot(fitVU))
if(! "error" %in% class(tmp1$value))  tabVU=tmp1$value
}
### Population density
tabVU[2,]/sum(transect.lengths)/(fitVU$w/1000) /2 ## divided by two to get the average over 2 years
# vedere https://github.com/david-borchers/LT2D/blob/master/inst/FitsForPaper.r
# linea nera sigmoide = distribuzione reale animali
# linea grigia = detection osservata
# linea tratteggiata = detection corretta tenendo conto della risposta comportamentale
plotfit.x(x[x<=w],fitVU,nclass=20);rug(x[x<=w])
GoFx(fitVU,plot=TRUE)$pvals
GoFx
fName = h.RE
GoFx(fitVU,plot=TRUE)$pvals
fName = h1
GoFx(fitVU,plot=TRUE)$pvals
GoFx(fitVU,plot=TRUE)
#plotfit.y(y[x<=w],x,fit.n,nclass=20);rug(x=y[x<=w])
plotfit.smoothfy(fitVU,nclass=32);rug(x=y[x<=w])
plotfit.y(y[x<=w],x,fit.n,nclass=20);rug(x=y[x<=w])
plotfit.y(y[x<=w],x,fitVU,nclass=20);rug(x=y[x<=w])
fName = "h1"
GoFx(fitVU,plot=TRUE)$pvals
GoFy(fitVU,plot=TRUE)$pvals
GoFy
GoFx
fit$hr
fit$hr = "h1"
GoFy(fitVU,plot=TRUE)$pvals
